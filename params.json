{
  "name": "Introduction to Databases",
  "tagline": "Comparative Database Technologies",
  "body": "# Introduction\r\nIt is often said that data is the new oil. If this is the case, then the database is how we store, collect, organize, and basically do everything with the oil until it goes into your car.\r\n\r\nFor a long time, relational databases were the only game in town. It is not the case anymore. There are now a variety of options, schemaless, horizontal scaling, high availability, etc. These are generally known as NoSQL databases. On this page, we will attempt to compare different databases, and more importantly try to answer the all important question:\r\n\r\nWhat database or combination of databases best resolves your problem?\r\n\r\nTo answer this, we need to learn a little more.\r\n\r\nWhat type of datastore is this?\r\n* Relational (e.g., postgres)\r\n* Key-value (e.g., Riak, Redis)\r\n* Columnar (e.g., HBase)\r\n* Document-oriented (e.g., MongoDB, CouchDB)\r\n* Graph (e.g., Neo4J)\r\n\r\nDatabases are created for a purpose. So we need to understand their purpose to pick.\r\n\r\nHow do you talk to it?\r\n\r\nHow does it perform?\r\n\r\nHow does it scale?\r\n\r\nImportant to remember: Most of your problems can be solved by multiple databases, so it is a matter of finding the best for the situation.\r\n\r\n### Relational Databases\r\n* Traditional\r\n* Relational Database Management Systems (RDBMSs) are set-theory-based.\r\n* Tables with rows and columns.\r\n* Write queries in Structured Query Language (SQL)\r\n* Data types are numeric, strings, dates, blobs, etc\r\n* Based on mathematical relational (set) theory\r\n\r\n### Key-Value\r\n* Pairs keys to values in much the same way as a map (or hastable)\r\n* Very simple and great performance\r\n* No complex query and aggregation needs\r\n\r\n### Columnar\r\n* Data from a given column (in the two-dimensional table sense) is stored together.\r\n* By contrast, a row-oriented database (like an RDBMS) keeps information about a row together.\r\n* Adding columns is quite inexpensive and is done on a row-by-row basis.\r\n* Each row can have a different set of columns, or none at all, allowing tables to remain sparse without incurring a storage cost for null values. \r\n* Columnar is about midway between relational and key-value. \r\n\r\n### Document-oriented databases store, well, documents\r\n* A document is like a hash\r\n* Documents can contain nested structures\r\n* Exhibit a high degree of flexibility, allowing for variable domains. \r\n\r\n### Graph Databases\r\n* Less commonly used database styles\r\n* Good at dealing with highly interconnected data. \r\n* A graph database consists of nodes and relationships between nodes. \r\n* Strength of graph databases is traversing through the nodes by following relationships. \r\n\r\n# PostgreSQL\r\n* Common\r\n* Old and trusty tool\r\n* Solves a number of problems\r\n* We can't move on to fancy new databases until we understand this\r\n* Battle-tested\r\n* It’s fast and reliable\r\n* Can handle terabytes of data\r\n* Has been proven to run in high-profile production\r\n* Companies using it: Skype, France’s Caisse Nationale d’Allocations Familiales (CNAF), and the United States’ Federal Aviation Administration (FAA). \r\n\r\n### Getting Started\r\nCreate the book schema\r\n```\r\n$ createdb book\r\n```\r\n\r\nRun your first query\r\n```\r\npsql book -c \"SELECT '1'::cube;\" \r\n```\r\n\r\n### Relations, CRUD, and Joins\r\nPostgres provides a back-end server that does all of the work and a command-line shell to connect to the running. It's a good thing we are good at this!\r\n\r\nConnect to the database and the schema book\r\n```\r\npsql book\r\n```\r\n\r\n* Typing \\h lists information about SQL commands\r\n* Follows the SQL convention of calling relations TABLEs\r\n* Attributes are COLUMNs\r\n* Tuples are ROWs.\r\n* You may encounter the mathematical terms relations, attributes, and tuples. \r\n\r\nPostgreSQL is a design-first datastore. Design the schema first. Then enter data. Here is how you create a table:\r\n\r\n```\r\nCREATE TABLE countries ( country_code char(2) PRIMARY KEY, country_name text UNIQUE );\r\n```\r\n\r\nSee mathematical relations in book for foundations of relational database\r\n\r\nOnce we have a table, we can insert it into it\r\n\r\n```\r\nINSERT INTO countries (country_code, country_name) \r\nVALUES ('us','United States'), ('mx','Mexico'), ('au','Australia'), ('gb','United Kingdom'), ('de','Germany'), ('ll','Loompaland'); \r\n```\r\n\r\nWhat if you try to insert a duplicate?\r\n```\r\nINSERT INTO countries VALUES ('uk','United Kingdom');\r\nERROR: duplicate key value violates unique constraint \"countries_country_name_key\" DETAIL: Key (country_name)=(United Kingdom) already exists.\r\n```\r\n\r\nHow can we get data back out?\r\n```\r\nSELECT * FROM countries;\r\ncountry_code | country_name \r\n--------------+--------------\r\nus | United States \r\nmx | Mexico \r\nau | Australia \r\ngb | United Kingdom \r\nde | Germany \r\nll | Loompaland \r\n(6 rows)\r\n```\r\n\r\nHow to remove from the database?\r\n```\r\nDELETE FROM countries WHERE country_code = 'll'; \r\n```\r\n\r\nCRUD: Create, Read, Update, and Delete.\r\n* Inserting new records (creating)\r\n* Reading existing records (reading)\r\n* Modifying existing records (updating)\r\n* Removing records you no longer need (deleting)\r\n\r\nIt gets more complex\r\n``` \r\nCREATE TABLE cities ( \r\n  name text NOT NULL, \r\n  postal_code varchar(9) CHECK (postal_code <> ''), \r\n  country_code char(2) REFERENCES countries, \r\n  PRIMARY KEY (country_code, postal_code) ); \r\n```\r\n\r\n* Constrained the name in cities by disallowing NULL values. \r\n* Constrained postal_code by checking that no values are empty strings (<> means not equal). \r\n* PRIMARYKEY uniquely identifies a row - created a compound key: country_code + postal_code.\r\n\r\n\r\n<b>Foreign keys and referential integrity</b>\r\n```\r\nINSERT INTO cities VALUES ('Toronto','M4C1B5','ca');\r\nERROR: insert or update on table \"cities\" violates foreign key constraint \"cities_country_code_fkey\" DETAIL: Key (country_code)=(ca) is not present in table \"countries\".\r\n```\r\n\r\n* country_code REFERENCES countries\r\n* the country_code must exist in the countries table. \r\n* Called maintaining referential integrity.\r\n\r\nSee Figure 1.\r\n\r\n### Join Reads\r\n* Most other databases also perform CRUD operations.\r\n* What sets relational databases like PostgreSQL apart is their ability to join tables together when reading them. \r\n* Joining is an operation taking two separate tables and combining them in some way to return a single table. \r\n* In the simplest form, you specify two columns (one from each table) to match by, using the ON keyword. \r\n\r\n```\r\nSELECT cities.*, country_name FROM cities INNER JOIN countries ON cities.country_code = countries.country_code;\r\ncountry_code | name | postal_code | country_name \r\n--------------+----------+-------------+--------------\r\nus | Portland | 97205 | United States \r\n```\r\n\r\nOuter joins\r\n* Merging two tables when the results of one table must always be returned, whether or not any matching column values exist on the other table. \r\n```\r\nSELECT e.title, v.name FROM events e LEFT JOIN venues v ON e.venue_id = v.venue_id;\r\n```\r\n\r\nExample of left join:\r\n```\r\nSELECT e.title, v.name\r\nFROM events e LEFT JOIN venues v\r\nON e.venue_id = v.venue_id;\r\ntitle            | name\r\n-----------------+----------------\r\nLARP Club        | Voodoo Donuts\r\nApril Fools Day  |\r\nChristmas Day    |\r\n```\r\n\r\n### ERD\r\nSee sample ERD in Figure 2\r\n\r\n### Indexes and B-trees\r\nConsider the statement:\r\n```\r\nSELECT * FROM events WHERE event_id = 2;\r\n```\r\nHow many records does PostgreSQL have to look through?\r\n\r\nAn index is a special data structure built to avoid a full table scan when performing a query. Without an index you have to check every row for a match. For indices, we use a B-tree data structure. See Figure 3.\r\n\r\nHere is a good summary of concepts. <b>Term Definition</b>\r\n* Column - A domain of values of a certain type, sometimes called an attribute\r\n* Row - An object comprised as a set of column values, sometimes called\r\na tuple\r\n* Table A set of rows with the same columns, sometimes called a relation\r\n* Primary key - The unique value that pinpoints a specific row\r\n* CRUD - Create, Read, Update, Delete\r\n* SQL - Structured Query Language, the lingua franca of a relational database\r\n* Join Combining two tables into one by some matching columns\r\n* Left join - Combining two tables into one by some matching columns or NULL if nothing matches the left table \r\n* Index - A data structure to optimize selection of a specific set of columns\r\n* B-tree - A good standard index; values are stored as a balanced tree\r\ndata structure; very flexible\r\n\r\n#### Aggregate Functions\r\n```\r\ntitle            | starts              |           ends      | venue\r\n-----------------+---------------------+---------------------+---------------\r\nWedding          | 2012-02-26 21:00:00 | 2012-02-26 23:00:00 | Voodoo Donuts\r\nDinner with Mom  | 2012-02-26 18:00:00 | 2012-02-26 20:30:00 | My Place\r\nValentine’s Day  | 2012-02-14 00:00:00 | 2012-02-14 23:59:00 |\r\n```\r\n\r\nConsider the following statements, where % is a wildcard:\r\n```\r\nSELECT count(title)\r\nFROM events\r\nWHERE title LIKE '%Day%';\r\n```\r\n\r\n```\r\nSELECT min(starts), max(ends)\r\nFROM events INNER JOIN venues\r\nON events.venue_id = venues.venue_id\r\nWHERE venues.name = 'Crystal Ballroom';\r\n```\r\n\r\nThese are great, but limited on their own. Consider what if we wanted to count by vendor ID:\r\n```\r\nSELECT count(*) FROM events WHERE venue_id = 1;\r\nSELECT count(*) FROM events WHERE venue_id = 2;\r\nSELECT count(*) FROM events WHERE venue_id = 3;\r\nSELECT count(*) FROM events WHERE venue_id IS NULL;\r\n```\r\n\r\nThis is pretty annoying. What we really need is a group by statement!\r\n```\r\nSELECT venue_id FROM events GROUP BY venue_id;\r\n```\r\n\r\n# Riak\r\n* Pronounced \"Ree-ahck\"\r\n* Distributed key-value database\r\n* Values can be anything - plain text, json, XML, images, video clips\r\n* Accessible through simple HTTP interface\r\n* Fault-tolerant - servers may go up or down at any moment - no need to worry about your cluster\r\n* There are some downsides - no robust support for ad hoc queries, key-value stores, no foreign keys\r\n\r\n### Riak and the Web\r\n* Query via URLs, headers, verbs, and Riak returns in standard HTTP response codes\r\n* Easy to setup, easy to manage, can grow with your needs\r\n* Ever used SimpleDB or S3 from Amazon? There are a lot of similarities because Riak is inspired by Amazon's Dynamo paper.\r\n\r\n### REST\r\n* REpresentational State Transfer\r\n* <i>de facto</i> architecture of web applications\r\n* REST is a guideline for mapping resources to URLs and interacting with them using CRUD verbs: POST (Create), GET (Read), PUT (Update), and DELETE (Delete).\r\n* We are going to use the good old curl command to speak directly to Riak's server.\r\n\r\n### PUT\r\nPUT parameter tells cURL that we want to perform an HTTP PUT action to store and retrieve on an explicit key.\r\n```\r\ncurl -v -X PUT http://localhost:8098/riak/favs/db \\\r\n-H \"Content-Type: text/html\" \\\r\n-d \"<html><body><h1>My new favorite DB is RIAK</h1></body></html>\"\r\n```\r\n\r\nParameters:\r\n* -H attribute sets the following text as HTTP header information\r\n* -d is the value\r\n* -X PUT is what tells cURL we are using the PUT operation.\r\n\r\n### Buckets\r\nRiak is key-value. It breaks up keys into buckets to avoid key collisions. For example, the key java for the language and the drink java.\r\n\r\nLet's create a bucket\r\n```\r\nhttp://SERVER:PORT/riak/BUCKET/KEY\r\n```\r\nYou don't need to explicitly create a bucket. All you need to do is execute a PUT.\r\n```\r\ncurl -v -X PUT http://localhost:8098/riak/animals/ace \\\r\n-H \"Content-Type: application/json\" \\\r\n-d '{\"nickname\" : \"The Wonder Dog\", \"breed\" : \"German Shepherd\"}'\r\n```\r\n\r\nWe can list the buckets that we've got using:\r\n```\r\ncurl -X GET http://localhost:8098/riak?buckets=true\r\n```\r\n\r\nIf you aren't picky about keys, you can get Riak to autocreate.\r\n\r\n### GET to retrieve a key\r\n```\r\ncurl http://localhost:8098/riak/animals/6VZc2o7zKxq2B34kJrm1S0ma3PO\r\n```\r\n\r\n### DELETE is also easy\r\n```\r\ncurl -i -X DELETE http://localhost:8098/riak/animals/6VZc2o7zKxq2B34kJrm1S0ma3PO\r\n```\r\n\r\n### Forgotten your keys\r\n```\r\ncurl http://localhost:8098/riak/animals?keys=true\r\n```\r\n\r\n### Links\r\nLinks are metadata that associate one key to other keys. Here is the basic structure.\r\n```\r\nLink: </riak/bucket/key>; riaktag=\\\"whatever\\\"\r\n```\r\nThe key that we are linking to is in the pointy brackets. Then the tag relates to this value and we can set it to anything.\r\n\r\nLinks are one directional. So if want to set the fact that Cage 1 contains the dog polly and it is installing in room 101.\r\n```\r\ncurl -X PUT http://localhost:8098/riak/cages/1 \\\r\n-H \"Content-Type: application/json\" \\\r\n-H \"Link: </riak/animals/polly>; riaktag=\\\"contains\\\"\" \\\r\n-d '{\"room\" : 101}'\r\n```\r\n\r\nYou can also do multiple links.\r\n```\r\n$ curl -X PUT http://localhost:8098/riak/cages/2 \\\r\n-H \"Content-Type: application/json\" \\\r\n-H \"Link:</riak/animals/ace>;riaktag=\\\"contains\\\",\r\n</riak/cages/1>;riaktag=\\\"next_to\\\"\" \\\r\n-d '{\"room\" : 101}'\r\n```\r\n\r\nNow you can retrieve all the links from cage 1.\r\n```\r\n$ curl http://localhost:8098/riak/cages/1/_,_,_\r\n--4PYi9DW8iJK5aCvQQrrP7mh7jZs\r\nContent-Type: multipart/mixed; boundary=Av1fawIA4WjypRlz5gHJtrRqklD\r\n--Av1fawIA4WjypRlz5gHJtrRqklD\r\nX-Riak-Vclock: a85hYGBgzGDKBVIcypz/fvrde/U5gymRMY+VwZw35gRfFgA=\r\nLocation: /riak/animals/polly\r\nContent-Type: application/json\r\nLink: </riak/animals>; rel=\"up\"\r\nEtag: VD0ZAfOTsIHsgG5PM3YZW\r\nLast-Modified: Tue, 13 Dec 2011 17:53:59 GMT\r\n{\"nickname\" : \"Sweet Polly Purebred\", \"breed\" : \"Purebred\"}\r\n--Av1fawIA4WjypRlz5gHJtrRqklD--\r\n--4PYi9DW8iJK5aCvQQrrP7mh7jZs--\r\n```\r\n\r\nThis is a bit of a mess, and we'll find an easier way to walk these links soon. But you could walk along these with cURL.\r\n\r\nYou can also store metadata by using the X-Riak-Meta header prefix.\r\n\r\nThere are a lot of MIME types in Riak including, but not limited to image/jpeg, etc.\r\n\r\n### Mapreduce and server clusters\r\nMapreduce allows us to perform more powerful queries than standard key-value paradigm.\r\n\r\nThe popularization is in part thanks to Google. Mapreduce has two parts:\r\n1. Convert a list of data into another type of list by way of a map() function\r\n2. Convert the second list to one or more scalar values by way of reduce\r\n\r\nFollowing this pattern allows you run them across a massive cluster of servers in parallel. For example, we could count up all Riak values by mapping each matching document to 1 and then reducing the sum of all these counts.\r\n\r\n```\r\nmap = function(v) {\r\nvar parsedData = JSON.parse(v.values[0].data);\r\nif(parsedData.country === 'CA')\r\nreturn [{count : 1}];\r\nelse\r\nreturn [{count : 0}];\r\n}\r\nreduce = function(mappedVals) {\r\nvar sums = {count : 0};\r\nfor (var i in mappedVals) {\r\nsums[count] += mappedVals[i][count];\r\n}\r\nreturn [sums];\r\n}\r\n```\r\n\r\nThis is opposite to how we used to run the select statement. Rather than grabbing data from the database and running it on a client, mapreduce is a pattern to pass an algorithm to all of the database nodes (IMPORTANT!).\r\n\r\nSee figure 7 for a map reduce function example. Works great when we have a lot of data and don't want to move all of it from the server to the client.\r\n\r\nSee Reducer Patterns on page 70.\r\n\r\n### Consistency and Durability\r\nRiak server architecture removes single points of failures\r\n\r\nIt is not possible to create\r\na distributed database that is fully consistent, available, and partition tolerant.\r\nYou can have only two (partition tolerant and consistent, partition tolerant\r\nand available, or consistent and available but not distributed). This is known\r\nas the CAP theorem (Consistency, Availability, Partition tolerance). \r\n\r\n# HBase\r\n* Made for big jobs (multiple gigabytes or more)\r\n* At a glance looks like a relational database because of similar terms, but this is not the case\r\n* Hbase is the bizzaro RBDMS\r\n\r\n### Why use HBase?\r\n* Versioning\r\n* Compression\r\n* Garbage Collection for expired data\r\n* In-memory tables\r\n* Strong consistency guarantees\r\n* For big queries HBase can outperform other DBs\r\n* Often used for logging or large search database\r\n\r\n### Some details\r\n* Initially made for natural language processing database\r\n* Based off Google's Big Table paper\r\n* Column-oriented\r\n* HBase is fault tolerent\r\n* HBase is built on Hadoop\r\n* Actively developed\r\n* Used by big companies (Facebook, Yahoo!, Twitter, etc)\r\n\r\n### HBase Shell\r\n```\r\n${HBASE_HOME}/bin/hbase shell\r\n```\r\n\r\n### Creating a table\r\n* A table in HBase is a map of maps\r\n* Keys are arbitrary strings that map to a row of data\r\n* The row itself is a map in which keys are called columns and values are uninterpreted bytes\r\n* Columns are grouped into column families often the family and column name are grouped together with a colon\r\n* See Figure 13 on page 98\r\n\r\n#### Creating a table and adding data wiki example\r\nSee Figure 14 on page 99\r\n\r\nCreating the table\r\n```\r\nhbase> create 'wiki', 'text'\r\n```\r\nTable is currently empty. It has no rows. One column family called text.\r\n\r\nInserting data into the table\r\n```\r\nhbase> put 'wiki', 'Home', 'text:', 'Welcome to the wiki!'\r\n```\r\n\r\nYou can query the db\r\n```\r\nhbase> get 'wiki', 'Home', 'text:'\r\n```\r\nThis returns something like\r\n```\r\nCOLUMN CELL\r\ntext: timestamp=1295774833226, value=Welcome to the wiki!\r\n1 row(s) in 0.0590 seconds\r\n```\r\nNotice the timestamp. HBase keeps track of historical data for you automatically, so you get versioning built right in.\r\n\r\n#### Cool aside\r\nFacebook using HBase tables for its messaging index table\r\n* HBase allows you to override the timestamp field on both get and put operations adding another dimension that you can overload. This is what Facebook did.\r\n\r\n#### A more complete and complicated Wiki Example\r\nSee Figure 15 and Figure 16 on page 102\r\n\r\nTo make changes to the schema, first disable the table\r\n```\r\nhbase> disable 'wiki'\r\n```\r\n\r\nThen we can modify column family characteristics using\r\n```\r\nhbase> alter 'wiki', { NAME => 'text', VERSIONS =>\r\nhbase* org.apache.hadoop.hbase.HConstants::ALL_VERSIONS }\r\n```\r\n\r\nNote: Operations that alter column family characteristics can be very expensive\r\nbecause HBase has to create a new column family with the chosen specifications\r\nand then copy all the data over. In a production system, this may incur\r\nsignificant downtime. For this reason, settling on column family options up\r\nfront is a good thing.\r\n\r\nFor our next example, let's add a new column family called revision\r\n```\r\nhbase> alter 'wiki', { NAME => 'revision', VERSIONS =>\r\nhbase* org.apache.hadoop.hbase.HConstants::ALL_VERSIONS }\r\n```\r\n\r\nSome more important notes:\r\n* we’re only adding a revision column family to the table schema, not individual columns. \r\n* we expect each row to eventually contain a revision:author and revision:comment\r\n* But it’s up to the client to honor this expectation\r\n* Not enforced by a schema\r\n* HBase will not stop you from doing bad things like adding in a new column\r\n\r\nOnce you are done, you will want to enable the table\r\n```\r\nhbase> enable 'wiki'\r\n```\r\n\r\n#### Why column families?\r\n* Downsides to avoiding column family is missing out on fine-grained performance tuning.\r\n* Each column family’s performance options are configured independently.\r\n* Performance affected: read and write speed and disk space consumption.\r\n* All operations in HBase are atomic at the row level.\r\n* No matter how many columns are affected, the operation will have a consistent view of the particular\r\nrow being accessed or modified. \r\n* Helps clients reason intelligently about the data.\r\n* For example: put operation affects several columns and doesn’t specify a timestamp, so all column values will have the same timestamp\r\n```\r\nhbase> get 'wiki', 'Home'\r\n```\r\nReturns something like\r\n```\r\nCOLUMN CELL\r\nrevision:author timestamp=1296462042029, value=jimbo\r\nrevision:comment timestamp=1296462042029, value=my first edit\r\ntext: timestamp=1296462042029, value=Hello world\r\n3 row(s) in 0.0300 seconds\r\n```\r\nNote how everything has the same timestamp.",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}