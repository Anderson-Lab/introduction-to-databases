{
  "name": "Introduction to Databases",
  "tagline": "",
  "body": "# Introduction\r\nIt is often said that data is the new oil. If this is the case, then the database is how we store, collect, organize, and basically do everything with the oil until it goes into your car.\r\n\r\nFor a long time, relational databases were the only game in town. It is not the case anymore. There are now a variety of options, schemaless, horizontal scaling, high availability, etc. These are generally known as NoSQL databases. On this page, we will attempt to compare different databases, and more importantly try to answer the all important question:\r\n\r\nWhat database or combination of databases best resolves your problem?\r\n\r\nTo answer this, we need to learn a little more.\r\n\r\nWhat type of datastore is this?\r\n* Relational (e.g., postgres)\r\n* Key-value (e.g., Riak, Redis)\r\n* Columnar (e.g., HBase)\r\n* Document-oriented (e.g., MongoDB, CouchDB)\r\n* Graph (e.g., Neo4J)\r\n\r\nDatabases are created for a purpose. So we need to understand their purpose to pick.\r\n\r\nHow do you talk to it?\r\n\r\nHow does it perform?\r\n\r\nHow does it scale?\r\n\r\nImportant to remember: Most of your problems can be solved by multiple databases, so it is a matter of finding the best for the situation.\r\n\r\n### Relational Databases\r\n* Traditional\r\n* Relational Database Management Systems (RDBMSs) are set-theory-based.\r\n* Tables with rows and columns.\r\n* Write queries in Structured Query Language (SQL)\r\n* Data types are numeric, strings, dates, blobs, etc\r\n* Based on mathematical relational (set) theory\r\n\r\n### Key-Value\r\n* Pairs keys to values in much the same way as a map (or hastable)\r\n* Very simple and great performance\r\n* No complex query and aggregation needs\r\n\r\n### Columnar\r\n* Data from a given column (in the two-dimensional table sense) is stored together.\r\n* By contrast, a row-oriented database (like an RDBMS) keeps information about a row together.\r\n* Adding columns is quite inexpensive and is done on a row-by-row basis.\r\n* Each row can have a different set of columns, or none at all, allowing tables to remain sparse without incurring a storage cost for null values. \r\n* Columnar is about midway between relational and key-value. \r\n\r\n### Document-oriented databases store, well, documents\r\n* A document is like a hash\r\n* Documents can contain nested structures\r\n* Exhibit a high degree of flexibility, allowing for variable domains. \r\n\r\n### Graph Databases\r\n* Less commonly used database styles\r\n* Good at dealing with highly interconnected data. \r\n* A graph database consists of nodes and relationships between nodes. \r\n* Strength of graph databases is traversing through the nodes by following relationships. \r\n\r\n# PostgreSQL\r\n* Common\r\n* Old and trusty tool\r\n* Solves a number of problems\r\n* We can't move on to fancy new databases until we understand this\r\n* Battle-tested\r\n* It’s fast and reliable\r\n* Can handle terabytes of data\r\n* Has been proven to run in high-profile production\r\n* Companies using it: Skype, France’s Caisse Nationale d’Allocations Familiales (CNAF), and the United States’ Federal Aviation Administration (FAA). \r\n\r\n### Getting Started\r\nCreate the book schema\r\n```\r\n$ createdb book\r\n```\r\n\r\nRun your first query\r\n```\r\npsql book -c \"SELECT '1'::cube;\" \r\n```\r\n\r\n### Relations, CRUD, and Joins\r\nPostgres provides a back-end server that does all of the work and a command-line shell to connect to the running. It's a good thing we are good at this!\r\n\r\nConnect to the database and the schema book\r\n```\r\npsql book\r\n```\r\n\r\n* Typing \\h lists information about SQL commands\r\n* Follows the SQL convention of calling relations TABLEs\r\n* Attributes are COLUMNs\r\n* Tuples are ROWs.\r\n* You may encounter the mathematical terms relations, attributes, and tuples. \r\n\r\nPostgreSQL is a design-first datastore. Design the schema first. Then enter data. Here is how you create a table:\r\n\r\n```\r\nCREATE TABLE countries ( country_code char(2) PRIMARY KEY, country_name text UNIQUE );\r\n```\r\n\r\nSee mathematical relations in book for foundations of relational database\r\n\r\nOnce we have a table, we can insert it into it\r\n\r\n```\r\nINSERT INTO countries (country_code, country_name) \r\nVALUES ('us','United States'), ('mx','Mexico'), ('au','Australia'), ('gb','United Kingdom'), ('de','Germany'), ('ll','Loompaland'); \r\n```\r\n\r\nWhat if you try to insert a duplicate?\r\n```\r\nINSERT INTO countries VALUES ('uk','United Kingdom');\r\nERROR: duplicate key value violates unique constraint \"countries_country_name_key\" DETAIL: Key (country_name)=(United Kingdom) already exists.\r\n```\r\n\r\nHow can we get data back out?\r\n```\r\nSELECT * FROM countries;\r\ncountry_code | country_name \r\n--------------+--------------\r\nus | United States \r\nmx | Mexico \r\nau | Australia \r\ngb | United Kingdom \r\nde | Germany \r\nll | Loompaland \r\n(6 rows)\r\n```\r\n\r\nHow to remove from the database?\r\n```\r\nDELETE FROM countries WHERE country_code = 'll'; \r\n```\r\n\r\nCRUD: Create, Read, Update, and Delete.\r\n* Inserting new records (creating)\r\n* Reading existing records (reading)\r\n* Modifying existing records (updating)\r\n* Removing records you no longer need (deleting)\r\n\r\nIt gets more complex\r\n``` \r\nCREATE TABLE cities ( \r\n  name text NOT NULL, \r\n  postal_code varchar(9) CHECK (postal_code <> ''), \r\n  country_code char(2) REFERENCES countries, \r\n  PRIMARY KEY (country_code, postal_code) ); \r\n```\r\n\r\n* Constrained the name in cities by disallowing NULL values. \r\n* Constrained postal_code by checking that no values are empty strings (<> means not equal). \r\n* PRIMARYKEY uniquely identifies a row - created a compound key: country_code + postal_code.\r\n\r\n\r\nForeign keys and referential integrity\r\n```\r\nINSERT INTO cities VALUES ('Toronto','M4C1B5','ca');\r\nERROR: insert or update on table \"cities\" violates foreign key constraint \"cities_country_code_fkey\" DETAIL: Key (country_code)=(ca) is not present in table \"countries\".\r\n```\r\n\r\n* country_code REFERENCES countries\r\n* the country_code must exist in the countries table. \r\n* Called maintaining referential integrity.\r\n\r\nSee Figure 1.\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}